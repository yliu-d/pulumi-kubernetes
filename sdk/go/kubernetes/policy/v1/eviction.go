// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
type Eviction struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// DeleteOptions may be provided
	DeleteOptions metav1.DeleteOptionsPtrOutput `pulumi:"deleteOptions"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// ObjectMeta describes the pod that is being evicted.
	Metadata metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
}

// NewEviction registers a new resource with the given unique name, arguments, and options.
func NewEviction(ctx *pulumi.Context,
	name string, args *EvictionArgs, opts ...pulumi.ResourceOption) (*Eviction, error) {
	if args == nil {
		args = &EvictionArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("policy/v1")
	args.Kind = pulumi.StringPtr("Eviction")
	var resource Eviction
	err := ctx.RegisterResource("kubernetes:policy/v1:Eviction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEviction gets an existing Eviction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEviction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EvictionState, opts ...pulumi.ResourceOption) (*Eviction, error) {
	var resource Eviction
	err := ctx.ReadResource("kubernetes:policy/v1:Eviction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Eviction resources.
type evictionState struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DeleteOptions may be provided
	DeleteOptions *metav1.DeleteOptions `pulumi:"deleteOptions"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// ObjectMeta describes the pod that is being evicted.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
}

type EvictionState struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// DeleteOptions may be provided
	DeleteOptions metav1.DeleteOptionsPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// ObjectMeta describes the pod that is being evicted.
	Metadata metav1.ObjectMetaPtrInput
}

func (EvictionState) ElementType() reflect.Type {
	return reflect.TypeOf((*evictionState)(nil)).Elem()
}

type evictionArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// DeleteOptions may be provided
	DeleteOptions *metav1.DeleteOptions `pulumi:"deleteOptions"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// ObjectMeta describes the pod that is being evicted.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a Eviction resource.
type EvictionArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// DeleteOptions may be provided
	DeleteOptions metav1.DeleteOptionsPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// ObjectMeta describes the pod that is being evicted.
	Metadata metav1.ObjectMetaPtrInput
}

func (EvictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*evictionArgs)(nil)).Elem()
}

type EvictionInput interface {
	pulumi.Input

	ToEvictionOutput() EvictionOutput
	ToEvictionOutputWithContext(ctx context.Context) EvictionOutput
}

func (*Eviction) ElementType() reflect.Type {
	return reflect.TypeOf((*Eviction)(nil))
}

func (i *Eviction) ToEvictionOutput() EvictionOutput {
	return i.ToEvictionOutputWithContext(context.Background())
}

func (i *Eviction) ToEvictionOutputWithContext(ctx context.Context) EvictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvictionOutput)
}

func (i *Eviction) ToEvictionPtrOutput() EvictionPtrOutput {
	return i.ToEvictionPtrOutputWithContext(context.Background())
}

func (i *Eviction) ToEvictionPtrOutputWithContext(ctx context.Context) EvictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvictionPtrOutput)
}

type EvictionPtrInput interface {
	pulumi.Input

	ToEvictionPtrOutput() EvictionPtrOutput
	ToEvictionPtrOutputWithContext(ctx context.Context) EvictionPtrOutput
}

type evictionPtrType EvictionArgs

func (*evictionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Eviction)(nil))
}

func (i *evictionPtrType) ToEvictionPtrOutput() EvictionPtrOutput {
	return i.ToEvictionPtrOutputWithContext(context.Background())
}

func (i *evictionPtrType) ToEvictionPtrOutputWithContext(ctx context.Context) EvictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvictionPtrOutput)
}

// EvictionArrayInput is an input type that accepts EvictionArray and EvictionArrayOutput values.
// You can construct a concrete instance of `EvictionArrayInput` via:
//
//          EvictionArray{ EvictionArgs{...} }
type EvictionArrayInput interface {
	pulumi.Input

	ToEvictionArrayOutput() EvictionArrayOutput
	ToEvictionArrayOutputWithContext(context.Context) EvictionArrayOutput
}

type EvictionArray []EvictionInput

func (EvictionArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Eviction)(nil))
}

func (i EvictionArray) ToEvictionArrayOutput() EvictionArrayOutput {
	return i.ToEvictionArrayOutputWithContext(context.Background())
}

func (i EvictionArray) ToEvictionArrayOutputWithContext(ctx context.Context) EvictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvictionArrayOutput)
}

// EvictionMapInput is an input type that accepts EvictionMap and EvictionMapOutput values.
// You can construct a concrete instance of `EvictionMapInput` via:
//
//          EvictionMap{ "key": EvictionArgs{...} }
type EvictionMapInput interface {
	pulumi.Input

	ToEvictionMapOutput() EvictionMapOutput
	ToEvictionMapOutputWithContext(context.Context) EvictionMapOutput
}

type EvictionMap map[string]EvictionInput

func (EvictionMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Eviction)(nil))
}

func (i EvictionMap) ToEvictionMapOutput() EvictionMapOutput {
	return i.ToEvictionMapOutputWithContext(context.Background())
}

func (i EvictionMap) ToEvictionMapOutputWithContext(ctx context.Context) EvictionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvictionMapOutput)
}

type EvictionOutput struct {
	*pulumi.OutputState
}

func (EvictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Eviction)(nil))
}

func (o EvictionOutput) ToEvictionOutput() EvictionOutput {
	return o
}

func (o EvictionOutput) ToEvictionOutputWithContext(ctx context.Context) EvictionOutput {
	return o
}

func (o EvictionOutput) ToEvictionPtrOutput() EvictionPtrOutput {
	return o.ToEvictionPtrOutputWithContext(context.Background())
}

func (o EvictionOutput) ToEvictionPtrOutputWithContext(ctx context.Context) EvictionPtrOutput {
	return o.ApplyT(func(v Eviction) *Eviction {
		return &v
	}).(EvictionPtrOutput)
}

type EvictionPtrOutput struct {
	*pulumi.OutputState
}

func (EvictionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Eviction)(nil))
}

func (o EvictionPtrOutput) ToEvictionPtrOutput() EvictionPtrOutput {
	return o
}

func (o EvictionPtrOutput) ToEvictionPtrOutputWithContext(ctx context.Context) EvictionPtrOutput {
	return o
}

type EvictionArrayOutput struct{ *pulumi.OutputState }

func (EvictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Eviction)(nil))
}

func (o EvictionArrayOutput) ToEvictionArrayOutput() EvictionArrayOutput {
	return o
}

func (o EvictionArrayOutput) ToEvictionArrayOutputWithContext(ctx context.Context) EvictionArrayOutput {
	return o
}

func (o EvictionArrayOutput) Index(i pulumi.IntInput) EvictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Eviction {
		return vs[0].([]Eviction)[vs[1].(int)]
	}).(EvictionOutput)
}

type EvictionMapOutput struct{ *pulumi.OutputState }

func (EvictionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Eviction)(nil))
}

func (o EvictionMapOutput) ToEvictionMapOutput() EvictionMapOutput {
	return o
}

func (o EvictionMapOutput) ToEvictionMapOutputWithContext(ctx context.Context) EvictionMapOutput {
	return o
}

func (o EvictionMapOutput) MapIndex(k pulumi.StringInput) EvictionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Eviction {
		return vs[0].(map[string]Eviction)[vs[1].(string)]
	}).(EvictionOutput)
}

func init() {
	pulumi.RegisterOutputType(EvictionOutput{})
	pulumi.RegisterOutputType(EvictionPtrOutput{})
	pulumi.RegisterOutputType(EvictionArrayOutput{})
	pulumi.RegisterOutputType(EvictionMapOutput{})
}
